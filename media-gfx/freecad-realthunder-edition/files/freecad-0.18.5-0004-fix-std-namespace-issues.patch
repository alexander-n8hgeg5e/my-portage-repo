From 29b3509c7a73814942d52d2e859de75b006f85a3 Mon Sep 17 00:00:00 2001
From: alexander-n8hgeg5e <alexander.w.email@gmail.com>
Date: Mon, 6 Jul 2020 08:33:09 +0200
Subject: [PATCH 3/8] fix std namespace issues

---
 src/Mod/Drawing/App/DrawingExport.cpp      | 218 ++++++++++-----------
 src/Mod/Part/App/Geometry2d.cpp            |  22 +--
 src/Mod/Raytracing/App/AppRaytracingPy.cpp |  22 +--
 src/Mod/Raytracing/App/LuxFeature.cpp      |  30 +--
 src/Mod/Raytracing/App/RayFeature.cpp      |  16 +-
 5 files changed, 154 insertions(+), 154 deletions(-)

diff --git a/src/Mod/Drawing/App/DrawingExport.cpp b/src/Mod/Drawing/App/DrawingExport.cpp
index 550b12c25..c2a51b2cc 100644
--- a/src/Mod/Drawing/App/DrawingExport.cpp
+++ b/src/Mod/Drawing/App/DrawingExport.cpp
@@ -435,7 +435,7 @@ void SVGOutput::printGeneric(const BRepAdaptor_Curve& c, int id, std::ostream& o
             out << c << " " << nodes(i).X() << " " << nodes(i).Y()<< " " ; 
             c = 'L';
         }
-        out << "\" />" << endl;
+        out << "\" />" << std::endl;
     } else if (c.GetType() == GeomAbs_Line) {
         //BRep_Tool::Polygon3D assumes the edge has polygon representation - ie already been "tessellated"
         //this is not true for all edges, especially "floating edges"
@@ -448,7 +448,7 @@ void SVGOutput::printGeneric(const BRepAdaptor_Curve& c, int id, std::ostream& o
         out << c << " " << s.X() << " " << s.Y()<< " " ; 
         c = 'L';
         out << c << " " << e.X() << " " << e.Y()<< " " ; 
-        out << "\" />" << endl;
+        out << "\" />" << std::endl;
     }
 }
 
@@ -486,10 +486,10 @@ std::string DXFOutput::exportEdges(const TopoDS_Shape& input)
 
 void DXFOutput::printHeader( std::ostream& out)
 {
-        out	 << 0          << endl;
-        out << "SECTION"  << endl;
-        out << 2          << endl;
-        out << "ENTITIES" << endl;
+        out	 << 0          << std::endl;
+        out << "SECTION"  << std::endl;
+        out << 2          << std::endl;
+        out << "ENTITIES" << std::endl;
 }
 
 void DXFOutput::printCircle(const BRepAdaptor_Curve& c, std::ostream& out)
@@ -513,22 +513,22 @@ void DXFOutput::printCircle(const BRepAdaptor_Curve& c, std::ostream& out)
     if (s.SquareDistance(e) < 0.001) {
         //out << "<circle cx =\"" << p.X() << "\" cy =\"" 
             //<< p.Y() << "\" r =\"" << r << "\" />";
-	    out << 0			<< endl;
-	    out << "CIRCLE"		<< endl;
-	    out << 8			<< endl;	// Group code for layer name
-	    out << "sheet_layer"	<< endl;	// Layer number
-        out << "100"        << endl;
-        out << "AcDbEntity" << endl;
-        out << "100"        << endl;
-        out << "AcDbCircle"   << endl;
-	    out << 10			<< endl;	// Centre X
-	    out << p.X()		<< endl;	// X in WCS coordinates
-	    out << 20			<< endl;
-	    out << p.Y()		<< endl;	// Y in WCS coordinates
-	    out << 30			<< endl;
-	    out << 0		<< endl;	// Z in WCS coordinates-leaving flat
-	    out << 40			<< endl;	//
-	    out << r		<< endl;	// Radius
+	    out << 0			<< std::endl;
+	    out << "CIRCLE"		<< std::endl;
+	    out << 8			<< std::endl;	// Group code for layer name
+	    out << "sheet_layer"	<< std::endl;	// Layer number
+        out << "100"        << std::endl;
+        out << "AcDbEntity" << std::endl;
+        out << "100"        << std::endl;
+        out << "AcDbCircle"   << std::endl;
+	    out << 10			<< std::endl;	// Centre X
+	    out << p.X()		<< std::endl;	// X in WCS coordinates
+	    out << 20			<< std::endl;
+	    out << p.Y()		<< std::endl;	// Y in WCS coordinates
+	    out << 30			<< std::endl;
+	    out << 0		<< std::endl;	// Z in WCS coordinates-leaving flat
+	    out << 40			<< std::endl;	//
+	    out << r		<< std::endl;	// Radius
                                 }
 
 
@@ -556,28 +556,28 @@ void DXFOutput::printCircle(const BRepAdaptor_Curve& c, std::ostream& out)
 		double temp = start_angle;
 		start_angle = end_angle;
 		end_angle = temp;}
-	out << 0			<< endl;
-	out << "ARC"		<< endl;
-	out << 8			<< endl;	// Group code for layer name
-	out << "sheet_layer"	<< endl;	// Layer number
-    out << "100"        << endl;
-    out << "AcDbEntity" << endl;
-    out << "100"        << endl;
-    out << "AcDbCircle" << endl;
-	out << 10			<< endl;	// Centre X
-	out << p.X()		<< endl;	// X in WCS coordinates
-	out << 20			<< endl;
-	out << p.Y()		<< endl;	// Y in WCS coordinates
-	out << 30			<< endl;
-	out << 0		<< endl;	// Z in WCS coordinates
-	out << 40			<< endl;	//
-	out << r		<< endl;	// Radius
-    out << "100"        << endl;
-    out << "AcDbArc" << endl;
-	out << 50			<< endl;
-	out << start_angle	<< endl;	// Start angle
-	out << 51			<< endl;
-	out << end_angle	<< endl;	// End angle
+	out << 0			<< std::endl;
+	out << "ARC"		<< std::endl;
+	out << 8			<< std::endl;	// Group code for layer name
+	out << "sheet_layer"	<< std::endl;	// Layer number
+    out << "100"        << std::endl;
+    out << "AcDbEntity" << std::endl;
+    out << "100"        << std::endl;
+    out << "AcDbCircle" << std::endl;
+	out << 10			<< std::endl;	// Centre X
+	out << p.X()		<< std::endl;	// X in WCS coordinates
+	out << 20			<< std::endl;
+	out << p.Y()		<< std::endl;	// Y in WCS coordinates
+	out << 30			<< std::endl;
+	out << 0		<< std::endl;	// Z in WCS coordinates
+	out << 40			<< std::endl;	//
+	out << r		<< std::endl;	// Radius
+    out << "100"        << std::endl;
+    out << "AcDbArc" << std::endl;
+	out << 50			<< std::endl;
+	out << start_angle	<< std::endl;	// Start angle
+	out << 51			<< std::endl;
+	out << end_angle	<< std::endl;	// End angle
 
 
 
@@ -629,32 +629,32 @@ void DXFOutput::printEllipse(const BRepAdaptor_Curve& c, int /*id*/, std::ostrea
 		start_angle = end_angle;
 		end_angle = temp;
 	}
-	out << 0			<< endl;
-	out << "ELLIPSE"		<< endl;
-	out << 8			<< endl;	// Group code for layer name
-	out << "sheet_layer"	<< endl;	// Layer number
-    out << "100"        << endl;
-    out << "AcDbEntity" << endl;
-    out << "100"        << endl;
-    out << "AcDbEllipse"   << endl;
-	out << 10			<< endl;	// Centre X
-	out << p.X()		<< endl;	// X in WCS coordinates
-	out << 20			<< endl;
-	out << p.Y()		<< endl;	// Y in WCS coordinates
-	out << 30			<< endl;
-	out << 0		<< endl;	// Z in WCS coordinates
-	out << 11			<< endl;	//
-	out << major_x		<< endl;	// Major X
-	out << 21			<< endl;
-	out << major_y		<< endl;	// Major Y
-	out << 31			<< endl;
-	out << 0		<< endl;	// Major Z
-	out << 40			<< endl;	//
-	out << ratio		<< endl;	// Ratio
-	out << 41		<< endl;
-	out << start_angle	<< endl;	// Start angle
-	out << 42		<< endl;
-	out << end_angle	<< endl;	// End angle
+	out << 0			<< std::endl;
+	out << "ELLIPSE"		<< std::endl;
+	out << 8			<< std::endl;	// Group code for layer name
+	out << "sheet_layer"	<< std::endl;	// Layer number
+    out << "100"        << std::endl;
+    out << "AcDbEntity" << std::endl;
+    out << "100"        << std::endl;
+    out << "AcDbEllipse"   << std::endl;
+	out << 10			<< std::endl;	// Centre X
+	out << p.X()		<< std::endl;	// X in WCS coordinates
+	out << 20			<< std::endl;
+	out << p.Y()		<< std::endl;	// Y in WCS coordinates
+	out << 30			<< std::endl;
+	out << 0		<< std::endl;	// Z in WCS coordinates
+	out << 11			<< std::endl;	//
+	out << major_x		<< std::endl;	// Major X
+	out << 21			<< std::endl;
+	out << major_y		<< std::endl;	// Major Y
+	out << 31			<< std::endl;
+	out << 0		<< std::endl;	// Major Z
+	out << 40			<< std::endl;	//
+	out << ratio		<< std::endl;	// Ratio
+	out << 41		<< std::endl;
+	out << start_angle	<< std::endl;	// Start angle
+	out << 42		<< std::endl;
+	out << end_angle	<< std::endl;	// End angle
 }
 
 void DXFOutput::printBSpline(const BRepAdaptor_Curve& c, int id, std::ostream& out) //Not even close yet- DF 
@@ -693,31 +693,31 @@ void DXFOutput::printBSpline(const BRepAdaptor_Curve& c, int id, std::ostream& o
         spline->Poles(poles);
 
 
-        str << 0 << endl
-            << "SPLINE" << endl
-            << 8 << endl // Group code for layer name
-            << "sheet_layer" << endl // Layer name
-            << "100"        << endl
-            << "AcDbEntity" << endl
-            << "100"        << endl
-            << "AcDbSpline"   << endl
-            << 70 << endl
-            << spline->IsRational()*4 << endl //flags
-            << 71 << endl << spline->Degree() << endl
-            << 72 << endl << knotsequence.Length() << endl
-            << 73 << endl << poles.Length() << endl
-            << 74 << endl << 0 << endl; //fitpoints
+        str << 0 << std::endl
+            << "SPLINE" << std::endl
+            << 8 << std::endl // Group code for layer name
+            << "sheet_layer" << std::endl // Layer name
+            << "100"        << std::endl
+            << "AcDbEntity" << std::endl
+            << "100"        << std::endl
+            << "AcDbSpline"   << std::endl
+            << 70 << std::endl
+            << spline->IsRational()*4 << std::endl //flags
+            << 71 << std::endl << spline->Degree() << std::endl
+            << 72 << std::endl << knotsequence.Length() << std::endl
+            << 73 << std::endl << poles.Length() << std::endl
+            << 74 << std::endl << 0 << std::endl; //fitpoints
 
         for (int i = knotsequence.Lower() ; i <= knotsequence.Upper(); i++) {
-            str << 40 << endl << knotsequence(i) << endl;
+            str << 40 << std::endl << knotsequence(i) << std::endl;
         }
         for (int i = poles.Lower(); i <= poles.Upper(); i++) {
             gp_Pnt pole = poles(i);
-            str << 10 << endl << pole.X() << endl
-                << 20 << endl << pole.Y() << endl
-                << 30 << endl << pole.Z() << endl;
+            str << 10 << std::endl << pole.X() << std::endl
+                << 20 << std::endl << pole.Y() << std::endl
+                << 30 << std::endl << pole.Z() << std::endl;
             if (spline->IsRational()) {
-                str << 41 << endl << spline->Weight(i) << endl;
+                str << 41 << std::endl << spline->Weight(i) << std::endl;
             }
         }
 
@@ -741,24 +741,24 @@ void DXFOutput::printGeneric(const BRepAdaptor_Curve& c, int /*id*/, std::ostrea
     gp_Vec VE;
     c.D1(uEnd, PE, VE);
 
-    out << "0"			<< endl;
-    out << "LINE"		<< endl;
-    out << "8"			<< endl;	// Group code for layer name
-    out << "sheet_layer" << endl; // Layer name 
-    out << "100"        << endl;
-    out << "AcDbEntity" << endl;
-    out << "100"        << endl;
-    out << "AcDbLine"   << endl;
-    out << "10"			<< endl;	// Start point of line
-    out << PS.X()		<< endl;	// X in WCS coordinates
-    out << "20"			<< endl;
-    out << PS.Y()		<< endl;	// Y in WCS coordinates
-    out << "30"			<< endl;
-    out << "0"		<< endl;	// Z in WCS coordinates
-    out << "11"			<< endl;	// End point of line
-    out << PE.X()		<< endl;	// X in WCS coordinates
-    out << "21"			<< endl;
-    out << PE.Y()		<< endl;	// Y in WCS coordinates
-    out << "31"			<< endl;
-    out << "0"		<< endl;	// Z in WCS coordinates
+    out << "0"			<< std::endl;
+    out << "LINE"		<< std::endl;
+    out << "8"			<< std::endl;	// Group code for layer name
+    out << "sheet_layer" << std::endl; // Layer name 
+    out << "100"        << std::endl;
+    out << "AcDbEntity" << std::endl;
+    out << "100"        << std::endl;
+    out << "AcDbLine"   << std::endl;
+    out << "10"			<< std::endl;	// Start point of line
+    out << PS.X()		<< std::endl;	// X in WCS coordinates
+    out << "20"			<< std::endl;
+    out << PS.Y()		<< std::endl;	// Y in WCS coordinates
+    out << "30"			<< std::endl;
+    out << "0"		<< std::endl;	// Z in WCS coordinates
+    out << "11"			<< std::endl;	// End point of line
+    out << PE.X()		<< std::endl;	// X in WCS coordinates
+    out << "21"			<< std::endl;
+    out << PE.Y()		<< std::endl;	// Y in WCS coordinates
+    out << "31"			<< std::endl;
+    out << "0"		<< std::endl;	// Z in WCS coordinates
 }
diff --git a/src/Mod/Part/App/Geometry2d.cpp b/src/Mod/Part/App/Geometry2d.cpp
index 979465533..cec993b2a 100644
--- a/src/Mod/Part/App/Geometry2d.cpp
+++ b/src/Mod/Part/App/Geometry2d.cpp
@@ -184,7 +184,7 @@ void Geom2dPoint::Save(Base::Writer &writer) const
         << "<Geom2dPoint "
         << "X=\"" << Point.x << "\" "
         << "Y=\"" << Point.y << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dPoint::Restore(Base::XMLReader &reader)
@@ -876,7 +876,7 @@ void Geom2dCircle::Save(Base::Writer& writer) const
     SaveAxis(writer, axis);
     writer.Stream()
         << "Radius=\"" << c.Radius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dCircle::Restore(Base::XMLReader& reader)
@@ -991,7 +991,7 @@ void Geom2dArcOfCircle::Save(Base::Writer &writer) const
     SaveAxis(writer, axis, u, v);
     writer.Stream()
         << "Radius=\"" << c.Radius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dArcOfCircle::Restore(Base::XMLReader &reader)
@@ -1153,7 +1153,7 @@ void Geom2dEllipse::Save(Base::Writer& writer) const
     writer.Stream()
         << "MajorRadius=\"" << e.MajorRadius() << "\" "
         << "MinorRadius=\"" << e.MinorRadius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dEllipse::Restore(Base::XMLReader& reader)
@@ -1330,7 +1330,7 @@ void Geom2dArcOfEllipse::Save(Base::Writer &writer) const
     writer.Stream()
         << "MajorRadius=\"" << e.MajorRadius() << "\" "
         << "MinorRadius=\"" << e.MinorRadius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dArcOfEllipse::Restore(Base::XMLReader &reader)
@@ -1459,7 +1459,7 @@ void Geom2dHyperbola::Save(Base::Writer& writer) const
     writer.Stream()
         << "MajorRadius=\"" <<  h.MajorRadius() << "\" "
         << "MinorRadius=\"" <<  h.MinorRadius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dHyperbola::Restore(Base::XMLReader& reader)
@@ -1592,7 +1592,7 @@ void Geom2dArcOfHyperbola::Save(Base::Writer &writer) const
     writer.Stream()
         << "MajorRadius=\"" <<  h.MajorRadius() << "\" "
         << "MinorRadius=\"" <<  h.MinorRadius() << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dArcOfHyperbola::Restore(Base::XMLReader &reader)
@@ -1703,7 +1703,7 @@ void Geom2dParabola::Save(Base::Writer& writer) const
     SaveAxis(writer, axis);
     writer.Stream()
         << "Focal=\"" << focal << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dParabola::Restore(Base::XMLReader& reader)
@@ -1816,7 +1816,7 @@ void Geom2dArcOfParabola::Save(Base::Writer &writer) const
     SaveAxis(writer, axis, u, v);
     writer.Stream()
         << "Focal=\"" << focal << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dArcOfParabola::Restore(Base::XMLReader &reader)
@@ -1931,7 +1931,7 @@ void Geom2dLine::Save(Base::Writer &writer) const
         << "PosY=\"" << Pos.y << "\" "
         << "DirX=\"" << Dir.x << "\" "
         << "DirY=\"" << Dir.y << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dLine::Restore(Base::XMLReader &reader)
@@ -2065,7 +2065,7 @@ void Geom2dLineSegment::Save(Base::Writer &writer) const
         << "StartY=\"" << Start.y << "\" "
         << "EndX=\"" << End.x << "\" "
         << "EndY=\"" << End.y << "\" "
-        << "/>" << endl;
+        << "/>" << std::endl;
 }
 
 void Geom2dLineSegment::Restore(Base::XMLReader &reader)
diff --git a/src/Mod/Raytracing/App/AppRaytracingPy.cpp b/src/Mod/Raytracing/App/AppRaytracingPy.cpp
index b6bc7de06..ea8fa44e2 100644
--- a/src/Mod/Raytracing/App/AppRaytracingPy.cpp
+++ b/src/Mod/Raytracing/App/AppRaytracingPy.cpp
@@ -106,13 +106,13 @@ private:
 
         PovTools::writeShape(out,PartName,aShape,(float)0.1);
         // This must not be done in PovTools::writeShape!
-        out << "// instance to render" << endl
-            << "object {" << PartName << endl
-            << "  texture {" << endl
-            << "      pigment {color rgb <"<<r<<","<<g<<","<<b<<">}" << endl
-            << "      finish {StdFinish } //definition on top of the project" << endl
-            << "  }" << endl
-            << "}" << endl   ;
+        out << "// instance to render" << std::endl
+            << "object {" << PartName << std::endl
+            << "  texture {" << std::endl
+            << "      pigment {color rgb <"<<r<<","<<g<<","<<b<<">}" << std::endl
+            << "      finish {StdFinish } //definition on top of the project" << std::endl
+            << "  }" << std::endl
+            << "}" << std::endl   ;
         return Py::String(out.str());
     }
     Py::Object getPartAsLux(const Py::Tuple& args)
@@ -129,10 +129,10 @@ private:
 
         // write a material entry
         // This must not be done in PovTools::writeShape!
-        out << "MakeNamedMaterial \"FreeCADMaterial_" << PartName << "\"" << endl;
-        out << "    \"color Kd\" [" << r << " " << g << " " << b << "]" << endl;
-        out << "    \"float sigma\" [0.000000000000000]" << endl;
-        out << "    \"string type\" [\"matte\"]" << endl << endl;
+        out << "MakeNamedMaterial \"FreeCADMaterial_" << PartName << "\"" << std::endl;
+        out << "    \"color Kd\" [" << r << " " << g << " " << b << "]" << std::endl;
+        out << "    \"float sigma\" [0.000000000000000]" << std::endl;
+        out << "    \"string type\" [\"matte\"]" << std::endl << std::endl;
 
         LuxTools::writeShape(out,PartName,aShape,(float)0.1);
         return Py::String(out.str());
diff --git a/src/Mod/Raytracing/App/LuxFeature.cpp b/src/Mod/Raytracing/App/LuxFeature.cpp
index d1e0a0089..b12e031b5 100644
--- a/src/Mod/Raytracing/App/LuxFeature.cpp
+++ b/src/Mod/Raytracing/App/LuxFeature.cpp
@@ -89,23 +89,23 @@ App::DocumentObjectExecReturn *LuxFeature::execute(void)
     const App::Color& c = Color.getValue();
     long t = Transparency.getValue();
     if (t == 0) {
-        result << "MakeNamedMaterial \"FreeCADMaterial_" << Name << "\"" << endl
-               << "    \"color Kd\" [" << c.r << " " << c.g << " " << c.b << "]" << endl
-               << "    \"float sigma\" [0.000000000000000]" << endl
-               << "    \"string type\" [\"matte\"]" << endl << endl;
+        result << "MakeNamedMaterial \"FreeCADMaterial_" << Name << "\"" << std::endl
+               << "    \"color Kd\" [" << c.r << " " << c.g << " " << c.b << "]" << std::endl
+               << "    \"float sigma\" [0.000000000000000]" << std::endl
+               << "    \"string type\" [\"matte\"]" << std::endl << std::endl;
     } else {
         float trans = t/100.0f;
-        result << "MakeNamedMaterial \"FreeCADMaterial_Base_" << Name << "\"" << endl
-               << "    \"color Kd\" [" << c.r << " " << c.g << " " << c.b << "]" << endl
-               << "    \"float sigma\" [0.000000000000000]" << endl
-               << "    \"string type\" [\"matte\"]" << endl << endl
-               << "MakeNamedMaterial \"FreeCADMaterial_Null_" << Name << "\"" << endl
-               << "    \"string type\" [\"null\"]" << endl << endl
-               << "MakeNamedMaterial \"FreeCADMaterial_" << Name << "\"" << endl
-               << "    \"string namedmaterial1\" [\"FreeCADMaterial_Null_" << Name << "\"]" << endl
-               << "    \"string namedmaterial2\" [\"FreeCADMaterial_Base_" << Name << "\"]" << endl
-               << "    \"float amount\" [" << trans << "]" << endl
-               << "    \"string type\" [\"mix\"]" << endl << endl;
+        result << "MakeNamedMaterial \"FreeCADMaterial_Base_" << Name << "\"" << std::endl
+               << "    \"color Kd\" [" << c.r << " " << c.g << " " << c.b << "]" << std::endl
+               << "    \"float sigma\" [0.000000000000000]" << std::endl
+               << "    \"string type\" [\"matte\"]" << std::endl << std::endl
+               << "MakeNamedMaterial \"FreeCADMaterial_Null_" << Name << "\"" << std::endl
+               << "    \"string type\" [\"null\"]" << std::endl << std::endl
+               << "MakeNamedMaterial \"FreeCADMaterial_" << Name << "\"" << std::endl
+               << "    \"string namedmaterial1\" [\"FreeCADMaterial_Null_" << Name << "\"]" << std::endl
+               << "    \"string namedmaterial2\" [\"FreeCADMaterial_Base_" << Name << "\"]" << std::endl
+               << "    \"float amount\" [" << trans << "]" << std::endl
+               << "    \"string type\" [\"mix\"]" << std::endl << std::endl;
     }
     
     LuxTools::writeShape(result,Name.c_str(),shape);
diff --git a/src/Mod/Raytracing/App/RayFeature.cpp b/src/Mod/Raytracing/App/RayFeature.cpp
index cdd2cb6dc..0da96449b 100644
--- a/src/Mod/Raytracing/App/RayFeature.cpp
+++ b/src/Mod/Raytracing/App/RayFeature.cpp
@@ -81,19 +81,19 @@ App::DocumentObjectExecReturn *RayFeature::execute(void)
     // This must not be done in PovTools::writeShape!
     long t = Transparency.getValue();
     const App::Color& c = Color.getValue();
-    result << "// instance to render" << endl
-           << "object {" << Name << endl
-           << " texture {" << endl;
+    result << "// instance to render" << std::endl
+           << "object {" << Name << std::endl
+           << " texture {" << std::endl;
     if (t == 0) {
-        result << "      pigment {color rgb <"<<c.r<<","<<c.g<<","<<c.b<<">}" << endl;
+        result << "      pigment {color rgb <"<<c.r<<","<<c.g<<","<<c.b<<">}" << std::endl;
     }
     else {
         float trans = t/100.0f;
-        result << "      pigment {color rgb <"<<c.r<<","<<c.g<<","<<c.b<<"> transmit "<<trans<<"}" << endl;
+        result << "      pigment {color rgb <"<<c.r<<","<<c.g<<","<<c.b<<"> transmit "<<trans<<"}" << std::endl;
     }
-    result << "      finish {StdFinish } //definition on top of the project" << endl
-           << "  }" << endl
-           << "}" << endl   ;
+    result << "      finish {StdFinish } //definition on top of the project" << std::endl
+           << "  }" << std::endl
+           << "}" << std::endl   ;
 
     // Apply the resulting fragment
     Result.setValue(result.str().c_str());
-- 
2.26.2

