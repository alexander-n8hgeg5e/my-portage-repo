# HG changeset patch
# User David Champion <dgc@uchicago.edu>
# Date 1454287308 0
#      Mon Feb 01 00:41:48 2016 +0000
# Node ID 8c0d8a47b677683d537e64e69d385d2dd536b1c7
# Parent  76ce4f77201c511b77d6cd81b651de3606812011
[PATCH] feature: nested-if
Allow complex nested conditions in the index_format
---
 muttlib.c | 55 +++++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 49 insertions(+), 6 deletions(-)

diff -r 76ce4f77201c -r 8c0d8a47b677 PATCHES
--- a/PATCHES	Sun Jan 31 17:17:10 2016 +0000
+++ b/PATCHES	Mon Feb 01 00:41:48 2016 +0000
@@ -1,3 +1,4 @@
+patch-nested-if-neomutt
 patch-initials-vvv
 patch-ifdef-neomutt
 patch-allow-slow-IO-interrupt-neomutt
diff -r 76ce4f77201c -r 8c0d8a47b677 muttlib.c
--- a/muttlib.c	Sun Jan 31 17:17:10 2016 +0000
+++ b/muttlib.c	Mon Feb 01 00:41:48 2016 +0000
@@ -1334,6 +1334,24 @@ void mutt_FormatString (char *dest,		/* 
 
       if (*src == '?')
       {
+	/* change original %? to new %< notation */
+	/* %?x?y&z? to %<x?y&z> where y and z are nestable */
+	char *p = (char *) src;
+	*p = '<';
+	for ( ; *p && *p != '?'; p++);
+	  /* nothing */
+	if (*p == '?') {
+	  p++;
+	}
+	for ( ; *p && *p != '?'; p++);
+	  /* nothing */
+	if (*p == '?') {
+	  *p = '>';
+	}
+      }
+
+      if (*src == '<')
+      {
 	flags |= MUTT_FORMAT_OPTIONAL;
 	src++;
       }
@@ -1360,6 +1378,8 @@ void mutt_FormatString (char *dest,		/* 
 
       if (flags & MUTT_FORMAT_OPTIONAL)
       {
+	int lrbalance;
+
         if (*src != '?')
           break; /* bad format */
         src++;
@@ -1367,8 +1387,20 @@ void mutt_FormatString (char *dest,		/* 
         /* eat the `if' part of the string */
         cp = ifstring;
 	count = 0;
-        while (count < sizeof (ifstring) && *src && *src != '?' && *src != '&')
-	{
+	lrbalance = 1;
+        while ((lrbalance > 0) && (count < sizeof (ifstring)) && *src) {
+	  if (*src == '\\') {
+	    src++;
+	    *cp++ = *src++;
+	  } else if ((src[0] == '%') && (src[1] == '<')) {
+	    lrbalance++;
+	  } else if (src[0] == '>') {
+	    lrbalance--;
+	  }
+	  if (lrbalance == 0)
+	    break;
+	  if ((lrbalance == 1) && (src[0] == '&'))
+	    break;
           *cp++ = *src++;
 	  count++;
 	}
@@ -1379,9 +1411,20 @@ void mutt_FormatString (char *dest,		/* 
 	  src++; /* skip the & */
 	cp = elsestring;
 	count = 0;
-	while (count < sizeof (elsestring) && *src && *src != '?')
-	{
-	  *cp++ = *src++;
+	while ((lrbalance > 0) && (count < sizeof (elsestring)) && *src) {
+	  if (*src == '\\') {
+	    src++;
+	    *cp++ = *src++;
+	  } else if ((src[0] == '%') && (src[1] == '<')) {
+	    lrbalance++;
+	  } else if (src[0] == '>') {
+	    lrbalance--;
+	  }
+	  if (lrbalance == 0)
+	    break;
+	  if ((lrbalance == 1) && (src[0] == '&'))
+	    break;
+          *cp++ = *src++;
 	  count++;
 	}
 	*cp = 0;
@@ -1389,7 +1432,7 @@ void mutt_FormatString (char *dest,		/* 
 	if (!*src)
 	  break; /* bad format */
 
-        src++; /* move past the trailing `?' */
+        src++; /* move past the trailing `>' (formerly '?') */
       }
 
       /* handle generic cases first */
