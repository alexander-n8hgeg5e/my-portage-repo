# HG changeset patch
# User Tim Stoakes <tim@stoakes.net>
# Date 1347780714 -7200
#      Sun Sep 16 09:31:54 2012 +0200
# Node ID e3eeb6a829ee24365c4533a4c599073542e689e0
# Parent  17c8d627a2783d79040173c03117cf3b388fe462
[PATCH] Add browser sort by description, message count and new
From 496bc4a961258b2e406723286a31b3e02ad59a9d Mon Sep 17 00:00:00 2001
 message count
Now the browser can sort by mail folder description, (all) message count, and
new message count.
---
 browser.c | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++---------
 init.h    |  6 +++++
 sort.h    |  2 +-
 3 files changed, 73 insertions(+), 11 deletions(-)

diff -r 17c8d627a278 -r e3eeb6a829ee PATCHES
--- a/PATCHES	Mon Oct 26 23:38:57 2015 -0400
+++ b/PATCHES	Sun Sep 16 09:31:54 2012 +0200
@@ -1,2 +1,3 @@
+patch-browser-sort-additions-neomutt
 patch-bind-enter-return-separately-gentoo
 patch-unlocked-IO-neomutt
diff -r 17c8d627a278 -r e3eeb6a829ee browser.c
--- a/browser.c	Mon Oct 26 23:38:57 2015 -0400
+++ b/browser.c	Sun Sep 16 09:31:54 2012 +0200
@@ -29,6 +29,7 @@
 #include "sort.h"
 #include "mailbox.h"
 #include "browser.h"
+#include "mx.h"
 #ifdef USE_IMAP
 #include "imap.h"
 #endif
@@ -85,6 +86,16 @@ static int browser_compare_subject (cons
   return ((BrowserSort & SORT_REVERSE) ? -r : r);
 }
 
+static int browser_compare_desc (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+
+  int r = mutt_strcoll (pa->desc, pb->desc);
+
+  return ((BrowserSort & SORT_REVERSE) ? -r : r);
+}
+
 static int browser_compare_date (const void *a, const void *b)
 {
   struct folder_file *pa = (struct folder_file *) a;
@@ -105,6 +116,30 @@ static int browser_compare_size (const v
   return ((BrowserSort & SORT_REVERSE) ? -r : r);
 }
 
+static int browser_compare_count (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+
+  int r = 0;
+  if (pa->has_buffy && pb->has_buffy)
+    r = pa->msg_count - pb->msg_count;
+
+  return ((BrowserSort & SORT_REVERSE) ? -r : r);
+}
+
+static int browser_compare_count_new (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+
+  int r = 0;
+  if (pa->has_buffy && pb->has_buffy)
+    r = pa->msg_unread - pb->msg_unread;
+
+  return ((BrowserSort & SORT_REVERSE) ? -r : r);
+}
+
 static void browser_sort (struct browser_state *state)
 {
   int (*f) (const void *, const void *);
@@ -119,6 +154,15 @@ static void browser_sort (struct browser
     case SORT_SIZE:
       f = browser_compare_size;
       break;
+    case SORT_DESC:
+      f = browser_compare_desc;
+      break;
+    case SORT_COUNT:
+      f = browser_compare_count;
+      break;
+    case SORT_UNREAD:
+      f = browser_compare_count_new;
+      break;
     case SORT_SUBJECT:
     default:
       f = browser_compare_subject;
@@ -342,7 +386,7 @@ folder_format_str (char *dest, size_t de
 }
 
 static void add_folder (MUTTMENU *m, struct browser_state *state,
-			const char *name, const struct stat *s, BUFFY *b)
+			const char *name, const char *desc, const struct stat *s, BUFFY *b)
 {
   if (state->entrylen == state->entrymax)
   {
@@ -376,7 +420,7 @@ static void add_folder (MUTTMENU *m, str
   }
 
   (state->entry)[state->entrylen].name = safe_strdup (name);
-  (state->entry)[state->entrylen].desc = safe_strdup (name);
+  (state->entry)[state->entrylen].desc = safe_strdup(desc ? desc : name);
 #ifdef USE_IMAP
   (state->entry)[state->entrylen].imap = 0;
 #endif
@@ -464,7 +508,7 @@ static int examine_directory (MUTTMENU *
       tmp->msg_count = Context->msgcount;
       tmp->msg_unread = Context->unread;
     }
-    add_folder (menu, state, de->d_name, &s, tmp);
+    add_folder (menu, state, de->d_name, NULL, &s, tmp);
   }
   closedir (dp);  
   browser_sort (state);
@@ -498,14 +542,14 @@ static int examine_mailboxes (MUTTMENU *
 #ifdef USE_IMAP
     if (mx_is_imap (tmp->path))
     {
-      add_folder (menu, state, buffer, NULL, tmp);
+      add_folder (menu, state, buffer, NULL, NULL, tmp);
       continue;
     }
 #endif
 #ifdef USE_POP
     if (mx_is_pop (tmp->path))
     {
-      add_folder (menu, state, buffer, NULL, tmp);
+      add_folder (menu, state, buffer, NULL, NULL, tmp);
       continue;
     }
 #endif
@@ -531,7 +575,7 @@ static int examine_mailboxes (MUTTMENU *
 	s.st_mtime = st2.st_mtime;
     }
 
-    add_folder (menu, state, buffer, &s, tmp);
+    add_folder (menu, state, buffer, NULL, &s, tmp);
   }
   while ((tmp = tmp->next));
   browser_sort (state);
@@ -1166,9 +1210,9 @@ void _mutt_select_file (char *f, size_t 
 	  int reverse = (i == OP_SORT_REVERSE);
 	  
 	  switch (mutt_multi_choice ((reverse) ?
-	      _("Reverse sort by (d)ate, (a)lpha, si(z)e or do(n)'t sort? ") :
-	      _("Sort by (d)ate, (a)lpha, si(z)e or do(n)'t sort? "),
-	      _("dazn")))
+	      _("Reverse sort by (d)ate, (a)lpha, si(z)e, d(e)scription, (c)ount, ne(w) count, or do(n)'t sort? ") :
+	      _("Sort by (d)ate, (a)lpha, si(z)e, d(e)scription, (c)ount, ne(w) count, or do(n)'t sort? "),
+	      _("dazecwn")))
 	  {
 	    case -1: /* abort */
 	      resort = 0;
@@ -1186,7 +1230,19 @@ void _mutt_select_file (char *f, size_t 
 	      BrowserSort = SORT_SIZE;
 	      break;
 
-            case 4: /* do(n)'t sort */
+            case 4: /* d(e)scription */
+	      BrowserSort = SORT_DESC;
+	      break;
+
+            case 5: /* (c)ount */
+	      BrowserSort = SORT_COUNT;
+	      break;
+
+            case 6: /* ne(w) count */
+	      BrowserSort = SORT_UNREAD;
+	      break;
+
+            case 7: /* do(n)'t sort */
 	      BrowserSort = SORT_ORDER;
 	      resort = 0;
 	      break;
diff -r 17c8d627a278 -r e3eeb6a829ee init.h
--- a/init.h	Mon Oct 26 23:38:57 2015 -0400
+++ b/init.h	Sun Sep 16 09:31:54 2012 +0200
@@ -3350,7 +3350,10 @@ struct option_t MuttVars[] = {
   ** entries are sorted alphabetically.  Valid values:
   ** .il
   ** .dd alpha (alphabetically)
+  ** .dd count (all message count)
   ** .dd date
+  ** .dd desc (description)
+  ** .dd new (new message count)
   ** .dd size
   ** .dd unsorted
   ** .ie
@@ -3973,7 +3976,10 @@ const struct mapping_t SortAuxMethods[] 
 
 const struct mapping_t SortBrowserMethods[] = {
   { "alpha",	SORT_SUBJECT },
+  { "count",	SORT_COUNT },
   { "date",	SORT_DATE },
+  { "desc",	SORT_DESC },
+  { "new",	SORT_UNREAD },
   { "size",	SORT_SIZE },
   { "unsorted",	SORT_ORDER },
   { NULL,       0 }
diff -r 17c8d627a278 -r e3eeb6a829ee sort.h
--- a/sort.h	Mon Oct 26 23:38:57 2015 -0400
+++ b/sort.h	Sun Sep 16 09:31:54 2012 +0200
@@ -36,6 +36,7 @@
 #define SORT_FLAGGED	17
 #define SORT_PATH	18
 #define SORT_LABEL	19
+#define SORT_DESC	20
 
 /* Sort and sort_aux are shorts, and are a composite of a
  * constant sort operation number and a set of compounded
