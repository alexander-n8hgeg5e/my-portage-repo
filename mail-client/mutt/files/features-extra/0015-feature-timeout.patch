# HG changeset patch
# User Richard Russon <rich@flatcap.org>
# Date 1462490650 -3600
#      Fri May 06 00:24:10 2016 +0100
# Node ID c52e531a89da6c01ceaf8693766f589640096f24
# Parent  754e16ccbd0cc4e2ce096bda11542742dfe25cad
[PATCH] feature: timeout hook
---
 curs_main.c |  4 +++-
 hook.c      | 31 ++++++++++++++++++++++++++++++-
 init.h      |  1 +
 mutt.h      |  1 +
 protos.h    |  1 +
 5 files changed, 36 insertions(+), 2 deletions(-)

diff -r 754e16ccbd0c -r c52e531a89da PATCHES
--- a/PATCHES	Sat Apr 23 13:33:50 2016 -0700
+++ b/PATCHES	Fri May 06 00:24:10 2016 +0100
@@ -1,3 +1,4 @@
+patch-timeout-neomutt
 patch-new-mail-neomutt
 patch-notmuch-gentoo
 patch-nntp-vvv
diff -r 754e16ccbd0c -r c52e531a89da curs_main.c
--- a/curs_main.c	Sat Apr 23 13:33:50 2016 -0700
+++ b/curs_main.c	Fri May 06 00:24:10 2016 +0100
@@ -968,6 +968,7 @@ int mutt_index_menu (void)
       /* either user abort or timeout */
       if (op < 0)
       {
+        mutt_timeout_hook();
         if (tag)
           mutt_window_clearline (MuttMessageWindow, 0);
         continue;
diff -r 754e16ccbd0c -r c52e531a89da hook.c
--- a/hook.c	Sat Apr 23 13:33:50 2016 -0700
+++ b/hook.c	Fri May 06 00:24:10 2016 +0100
@@ -154,7 +154,7 @@ int mutt_parse_hook (BUFFER *buf, BUFFER
 	ptr->rx.not == not &&
 	!mutt_strcmp (pattern.data, ptr->rx.pattern))
     {
-      if (data & (MUTT_FOLDERHOOK | MUTT_SENDHOOK | MUTT_SEND2HOOK | MUTT_MESSAGEHOOK | MUTT_ACCOUNTHOOK | MUTT_REPLYHOOK | MUTT_CRYPTHOOK))
+      if (data & (MUTT_FOLDERHOOK | MUTT_SENDHOOK | MUTT_SEND2HOOK | MUTT_MESSAGEHOOK | MUTT_ACCOUNTHOOK | MUTT_REPLYHOOK | MUTT_CRYPTHOOK | MUTT_TIMEOUTHOOK))
       {
 	/* these hooks allow multiple commands with the same
 	 * pattern, so if we've already seen this pattern/command pair, just
@@ -563,3 +563,32 @@ void mutt_account_hook (const char* url)
   FREE (&err.data);
 }
 #endif
+
+void mutt_timeout_hook (void)
+{
+  HOOK *hook;
+  BUFFER token;
+  BUFFER err;
+  char buf[STRING];
+
+  err.data = buf;
+  err.dsize = sizeof (buf);
+  memset (&token, 0, sizeof (token));
+
+  for (hook = Hooks; hook; hook = hook->next)
+  {
+    if (!(hook->command && (hook->type & MUTT_TIMEOUTHOOK)))
+      continue;
+
+    if (mutt_parse_rc_line (hook->command, &token, &err) == -1)
+    {
+      FREE (&token.data);
+      mutt_error ("%s", err.data);
+      mutt_sleep (1);
+
+      /* The hooks should be independent of each other, so even though this on
+       * failed, we'll carry on with the others. */
+    }
+  }
+}
+
diff -r 754e16ccbd0c -r c52e531a89da init.h
--- a/init.h	Sat Apr 23 13:33:50 2016 -0700
+++ b/init.h	Fri May 06 00:24:10 2016 +0100
@@ -4459,6 +4459,7 @@ const struct command_t Commands[] = {
   { "subscribe",	parse_subscribe,	0 },
   { "subjectrx",    parse_subjectrx_list, UL &SubjectRxList },
   { "unsubjectrx",  parse_unsubjectrx_list, UL &SubjectRxList },
+  { "timeout-hook",	mutt_parse_hook,	MUTT_TIMEOUTHOOK },
   { "toggle",		parse_set,		MUTT_SET_INV },
   { "unalias",		parse_unalias,		0 },
   { "unalternative_order",parse_unlist,		UL &AlternativeOrderList },
diff -r 754e16ccbd0c -r c52e531a89da mutt.h
--- a/mutt.h	Sat Apr 23 13:33:50 2016 -0700
+++ b/mutt.h	Fri May 06 00:24:10 2016 +0100
@@ -164,6 +164,7 @@ typedef enum
 #define MUTT_APPENDHOOK  (1<<13)
 #define MUTT_CLOSEHOOK   (1<<14)
 #endif
+#define MUTT_TIMEOUTHOOK (1<<15)
 
 /* tree characters for linearize_tree and print_enriched_string */
 #define MUTT_TREE_LLCORNER      1
diff -r 754e16ccbd0c -r c52e531a89da protos.h
--- a/protos.h	Sat Apr 23 13:33:50 2016 -0700
+++ b/protos.h	Fri May 06 00:24:10 2016 +0100
@@ -154,6 +154,7 @@ const char *mutt_get_name (ADDRESS *);
 char *mutt_get_parameter (const char *, PARAMETER *);
 LIST *mutt_crypt_hook (ADDRESS *);
 char *mutt_make_date (char *, size_t);
+void mutt_timeout_hook (void);
 
 const char *mutt_make_version (void);
 
