# HG changeset patch
# User David Sterba <dsterba@suse.cz>
# Date 1337866493 -7200
#      Thu May 24 15:34:53 2012 +0200
# Node ID e2d8409db32582087d1686d7c8c5798a1ae8689e
# Parent  4f11a04b18c224c600f171148b8a9a573fc954a9
[PATCH] feature: limit-current-thread
Add command to limit view on the thread from any of its message.
Predefined on command <ESC>L, though the lowercase 'l' would be better
(less keystrokes), but it's already occupied by a not-so-useful command
"show limit".

Tested on large folders, no performance problems observed.

Search in current thread is not implemented.

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 OPS         |  1 +
 curs_main.c |  4 +++-
 functions.h |  1 +
 mutt_menu.h |  2 ++
 pattern.c   | 68 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 75 insertions(+), 1 deletion(-)

diff -r 4f11a04b18c2 -r e2d8409db325 OPS
--- a/OPS	Sat Jan 30 16:27:19 2016 +0000
+++ b/OPS	Thu May 24 15:34:53 2012 +0200
@@ -180,6 +180,7 @@ OP_VERSION "show the Mutt version number
 OP_VIEW_ATTACH "view attachment using mailcap entry if necessary"
 OP_VIEW_ATTACHMENTS "show MIME attachments"
 OP_WHAT_KEY "display the keycode for a key press"
+OP_LIMIT_CURRENT_THREAD "limit view to current thread"
 OP_MAIN_SHOW_LIMIT "show currently active limit pattern"
 OP_MAIN_COLLAPSE_THREAD "collapse/uncollapse current thread"
 OP_MAIN_COLLAPSE_ALL "collapse/uncollapse all threads"
diff -r 4f11a04b18c2 -r e2d8409db325 PATCHES
--- a/PATCHES	Sat Jan 30 16:27:19 2016 +0000
+++ b/PATCHES	Thu May 24 15:34:53 2012 +0200
@@ -1,3 +1,4 @@
+patch-limit-current-thread-neomutt
 patch-quasi-delete-neomutt
 patch-index-color-neomutt
 patch-status-color-neomutt
diff -r 4f11a04b18c2 -r e2d8409db325 curs_main.c
--- a/curs_main.c	Sat Jan 30 16:27:19 2016 +0000
+++ b/curs_main.c	Thu May 24 15:34:53 2012 +0200
@@ -1048,12 +1048,14 @@ int mutt_index_menu (void)
 	}
         break;
 
+      case OP_LIMIT_CURRENT_THREAD:
       case OP_MAIN_LIMIT:
 
 	CHECK_IN_MAILBOX;
 	menu->oldcurrent = (Context->vcount && menu->current >= 0 && menu->current < Context->vcount) ?
 		CURHDR->index : -1;
-	if (mutt_pattern_func (MUTT_LIMIT, _("Limit to messages matching: ")) == 0)
+	if (((op == OP_LIMIT_CURRENT_THREAD) && mutt_limit_current_thread(CURHDR))
+	    || ((op == OP_MAIN_LIMIT) && (mutt_pattern_func (MUTT_LIMIT, _("Limit to messages matching: ")) == 0)))
 	{
 	  if (menu->oldcurrent >= 0)
 	  {
diff -r 4f11a04b18c2 -r e2d8409db325 functions.h
--- a/functions.h	Sat Jan 30 16:27:19 2016 +0000
+++ b/functions.h	Thu May 24 15:34:53 2012 +0200
@@ -113,6 +113,7 @@ const struct binding_t OpMain[] = { /* m
   { "next-undeleted",		OP_MAIN_NEXT_UNDELETED,		"j" },
   { "previous-undeleted",	OP_MAIN_PREV_UNDELETED,		"k" },
   { "limit",			OP_MAIN_LIMIT,			"l" },
+  { "limit-current-thread",	OP_LIMIT_CURRENT_THREAD,	NULL },
   { "link-threads",		OP_MAIN_LINK_THREADS,		"&" },
   { "list-reply",		OP_LIST_REPLY,			"L" },
   { "mail",			OP_MAIL,			"m" },
diff -r 4f11a04b18c2 -r e2d8409db325 mutt_menu.h
--- a/mutt_menu.h	Sat Jan 30 16:27:19 2016 +0000
+++ b/mutt_menu.h	Thu May 24 15:34:53 2012 +0200
@@ -137,4 +137,6 @@ int mutt_menuLoop (MUTTMENU *);
 void index_make_entry (char *, size_t, struct menu_t *, int);
 int index_color (int);
 
+int mutt_limit_current_thread (HEADER *h);
+
 #endif /* _MUTT_MENU_H_ */
diff -r 4f11a04b18c2 -r e2d8409db325 pattern.c
--- a/pattern.c	Sat Jan 30 16:27:19 2016 +0000
+++ b/pattern.c	Thu May 24 15:34:53 2012 +0200
@@ -1412,6 +1412,74 @@ void mutt_check_simple (char *s, size_t 
   }
 }
 
+/**
+ * top_of_thread - Find the first email in the current thread
+ * @h: Header of current email
+ *
+ * Returns:
+ *	THREAD*: success, email found
+ *	NULL:    on error
+ */
+static THREAD *
+top_of_thread (HEADER *h)
+{
+	THREAD *t;
+
+	if (!h)
+		return NULL;
+
+	t = h->thread;
+
+	while (t && t->parent)
+		t = t->parent;
+
+	return t;
+}
+
+/**
+ * mutt_limit_current_thread - Limit the email view to the current thread
+ * @h: Header of current email
+ *
+ * Returns:
+ *	1: Success
+ *	0: Failure
+ */
+int
+mutt_limit_current_thread (HEADER *h)
+{
+	int i;
+	THREAD *me;
+
+	if (!h)
+		return 0;
+
+	me = top_of_thread (h);
+	if (!me)
+		return 0;
+
+	Context->vcount    = 0;
+	Context->vsize     = 0;
+	Context->collapsed = 0;
+
+	for (i = 0; i < Context->msgcount; i++) {
+		Context->hdrs[i]->virtual    = -1;
+		Context->hdrs[i]->limited    = 0;
+		Context->hdrs[i]->collapsed  = 0;
+		Context->hdrs[i]->num_hidden = 0;
+
+		if (top_of_thread (Context->hdrs[i]) == me) {
+			BODY *body = Context->hdrs[i]->content;
+
+			Context->hdrs[i]->virtual = Context->vcount;
+			Context->hdrs[i]->limited = 1;
+			Context->v2r[Context->vcount] = i;
+			Context->vcount++;
+			Context->vsize += (body->length + body->offset - body->hdr_offset);
+		}
+	}
+	return 1;
+}
+
 int mutt_pattern_func (int op, char *prompt)
 {
   pattern_t *pat = NULL;
